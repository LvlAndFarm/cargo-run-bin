[package]
name = "cargo-run-bin"
version = "1.0.1"
authors = ["Dustin Blackman"]
categories = ["command-line-utilities", "development-tools::cargo-plugins"]
edition = "2021"
homepage = "https://github.com/dustinblackman/cargo-run-bin"
keywords = ["dev-experiance", "developer-experiance", "bin", "cache"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/dustinblackman/cargo-run-bin"
description = "Build, cache, and run binaries scoped in Cargo.toml rather than installing globally. This acts similarly to npm run and gomodrun, and allows your teams to always be running the same tooling versions."

[dependencies]
anyhow = "1.0.40"
cargo_metadata = "0.13.1"
cargo_toml = "0.10.3"
clap = "4.3.19"
owo-colors = "3.5.0"
serde = "1.0.149"
toml = "0.5.9"
toml_edit = "0.19.14"
version_check = "0.9.3"

[dev-dependencies]
assert_cmd = "2.0.12"
expectest = "0.12.0"

[[bin]]
name = "cargo-bin"
path = "src/main.rs"

[package.metadata.bin]
cargo-cmd = { version = "0.3.1" }
cargo-deny = { version = "0.13.5" }
cargo-llvm-cov = { version = "0.5.25" }
cargo-nextest = { version = "0.9.57", locked = true }
dprint = { version = "0.30.3" }
# Just added for testing
tauri-mobile = { version = "0.5.2", bins = ["cargo-android", "cargo-mobile"] }

[package.metadata.commands]
lint = '''set -e
cargo cmd setup-nightly
cargo +runbin-nightly fmt -- --check
cargo clippy
cargo bin dprint check
cargo deny check licenses
'''
lint-fix = '''set -e
cargo cmd setup-nightly
cargo clippy --fix --allow-dirty
cargo fix --allow-dirty
cargo +runbin-nightly fmt
cargo bin dprint fmt
'''

setup-nightly = '''
  export RUNBIN_NIGHTLY=nightly-2023-06-16
  rustup toolchain install "$RUNBIN_NIGHTLY" --component llvm-tools-preview rustfmt --force
  rustup toolchain link runbin-nightly "$(rustup toolchain list -v | grep $RUNBIN_NIGHTLY | grep '^nightly-' | awk '{print $2}')"
'''

release = '''set -e
  cargo cmd lint
  cargo cmd test

  export RUNBIN_VERSION=$(cat Cargo.toml | grep version | head -n1 | awk -F '"' '{print $2}')
  git add .
  git commit -m "v$RUNBIN_VERSION"
  git tag -a "v$RUNBIN_VERSION" -m "v$RUNBIN_VERSION"

  cargo publish --dry-run

  git push
  git push --tags
  gh release create "v$RUNBIN_VERSION" --generate-notes
  cargo publish
'''

test-coverage = '''set -e
  cargo build
  cargo llvm-cov nextest --ignore-filename-regex='_test.rs'
'''
test-coverage-html = '''set -e
  cargo build
  cargo llvm-cov nextest --open --ignore-filename-regex='_test.rs'
'''
test-coverage-lcov = '''set -e
  cargo build
  rm -f lcov.info
  cargo llvm-cov nextest --lcov --output-path lcov.info --ignore-filename-regex='_test.rs'
'''
test = '''set -e
  cargo build
  cargo nextest run
'''
